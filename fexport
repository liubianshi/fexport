#!/usr/bin/env perl
# vim: set ft=perl nowrap fdm=marker

# load module ================================================================= {{{1
use v5.20;
use strict;
use File::Basename;
use File::Spec;
use Getopt::Long;
use Data::Dumper qw(Dumper);
use warnings;
use File::Temp qw/tempfile tempdir/;
use Cwd;
use feature qw( switch );
use YAML;
no warnings qw( experimental::smartmatch );

my $PROGRAM_DIR = -l $0 ? dirname(readlink($0)) : dirname($0);
require(File::Spec->catfile($PROGRAM_DIR, "rmd.pl"));

# parse parameters ====================================================== {{{1
Getopt::Long::Configure ("bundling");
GetOptions('to|t=s'      => \my $OUTFORMAT,
           'from|f=s'    => \my $FROM,
           'outfile|o=s' => \my $OUTFILE,
           'verbose|v'   => \my $VERBOSE,
           'pandoc|p=s'  => \my $PANDOC_OPTS_USER,
           'help|h'      => \my $HELP);
if ($HELP) { help(); exit 0 }

local %SIG = (%SIG, INT  => \&clean_temp_file, TERM => \&clean_temp_file);
my ($LOG_FH, $LOG_FILE) = tempfile();
sub clean_temp_file {
    close $LOG_FH;
    unlink $LOG_FILE;
}

my $INFILE = $ARGV[0];
$FROM      //= $INFILE  =~ m/\.(\w+)$/  ?  $1  :  "md";
$OUTFORMAT //= $OUTFILE =~ m/\.(\w+)$/  ?  $1  :  "html";
$OUTFILE   //= $INFILE  =~ s/\.\w+$/.$OUTFORMAT/r;
($FROM, $OUTFORMAT) = map {lc} $FROM, $OUTFORMAT;

my $PANDOC_RUN          = 0;
my $PANDOC_CMD          = "pandoc +RTS -M512M -RTS";
my $PANDOC_MARKDOWN     = "markdown+emoji+east_asian_line_breaks+autolink_bare_uris";
my @PANDOC_MARKDOWN_EXT = ("md", "markdown", "rmd", "rmarkdown");
my @PANDOC              = ($PANDOC_CMD,
                           $PANDOC_OPTS_USER // "",
                           '--from="' . ($FROM ~~ @PANDOC_MARKDOWN_EXT ? $PANDOC_MARKDOWN : $FROM) . '"',
                           "--lua-filter=rsbc.lua") ;

# system("cp", "-f", "test.docx", "draft.docx");
# str_adj_word("draft.docx");
# say "comp";
# exit 0;

# parse input_file ====================================================== {{{1
my @MD_CONTENTS;
if ($FROM eq "md") {
    push @MD_CONTENTS, $_ while (<<>>);
}
elsif ($FROM eq "rmd") {
    my ($tpfh, $tpfile) = tempfile(suffix => '.rmd');
    unless (defined $INFILE) {
        print $tpfh $_ while (<>);
        close $tpfh;
    }
    my %rmdopt = knit_rmd2($INFILE // $tpfile,
                          $OUTFORMAT,
                          \@MD_CONTENTS,
                          \@PANDOC,
                          $LOG_FILE); 
    $OUTFORMAT = $rmdopt{to} // $rmdopt{ext};
    if ($rmdopt{run_pandoc} eq "no") {
        $OUTFILE =~ s/\.\w+$/"." . $rmdopt{ext}/e;
    }
    else {
        $OUTFILE = $rmdopt{outfile};
        $PANDOC_RUN = 1;
    }
}
else {
    die "$FROM wasn't supperted yet!" 
}

# transform markdown contest to target format =========================== {{{1
given ($OUTFORMAT) {
    when ("html") {
        push @PANDOC, pandoc_opts_default($OUTFORMAT), "--to=html", "--output=\"$OUTFILE\"";
        my @html_contents = ();
        md2array(\@MD_CONTENTS, \@html_contents, \@PANDOC);
        str_adj_etal(\@html_contents);
        str_adj_html(\@html_contents);
        write2file(\@html_contents, $OUTFILE);
    }
    when ("docx") {
        unless ($PANDOC_RUN) {
            push @PANDOC, pandoc_opts_default($OUTFORMAT),
                "--to=docx", "--output=\"$OUTFILE\"";
            md2file(\@MD_CONTENTS, \@PANDOC);
        }
        str_adj_word($OUTFILE);
    }
    when ("pdf") {
        my @tex_contents = ();
        my $dir = tempdir();
        my $intermidaite = File::Spec->catfile($dir, "intermidaite.tex");
        $OUTFILE =~ s/pdf$/tex/;
        push @PANDOC, pandoc_opts_default("tex"), "--output=\"$OUTFILE\"", "--to=latex";

        str_adj_md_contents_for_tex(\@MD_CONTENTS);
        md2array(\@MD_CONTENTS, \@tex_contents, \@PANDOC);
        str_adj_tex(\@tex_contents);
        write2file(\@tex_contents, $intermidaite);
        $OUTFILE =~ s/tex$/pdf/;
        system(qq{
            latexmk -quiet -xelatex -outdir="$dir" "$intermidaite" >>$LOG_FILE 2>>$LOG_FILE
            mv $dir/intermidaite.pdf "$OUTFILE"
        });
    }
    default {
        push @PANDOC, pandoc_opts_default($OUTFORMAT), "--to=$OUTFORMAT", "--output=\"$OUTFILE\"";
        md2file(\@MD_CONTENTS, \@PANDOC);
    }
}

if ($VERBOSE) {
    print $_ while (<$LOG_FH>);
}
say "$OUTFILE";
clean_temp_file(); 
exit 0;


# function needed to used =============================================== {{{1
# transform md content in array to target format in array --------------------- {{{2
sub md2array {
    my ($in_contents, $out_contents, $pandoc) = @_;
    md2file($in_contents, $pandoc);
    open my $read_content, "<", $OUTFILE
        or die "cannot open file $OUTFILE: $!";
    @{$out_contents} = <$read_content>;
    close $read_content;
}


# transform md contests in array to target file ------------------------- {{{2
sub md2file {
    my ($in_contents, $pandoc) = @_;
    open my $pandoc_fh, "|-", join(" ", @{$pandoc})
        or die "cannot run pandoc: $!\n";
    print $pandoc_fh join "", @{$in_contents};
    close $pandoc_fh
}

# pandoc default options ------------------------------------------------ {{{2
sub pandoc_opts_default {
    my $to = shift;
    my ($datadir, $defaults, $defaultfile);
    $datadir = qx[pandoc --version | grep -E '^User data'];
    $datadir =~ s/^.*\s*User data directory:\s*([^\s]+)\n/$1/;
    $defaultfile = File::Spec->catfile($datadir, "defaults", "2$to.yaml");
    $defaults = "-d2$to" if -f $defaultfile;
    if (qx/uname/ =~ m/^Darwin/) {
        $defaultfile  = File::Spec->catfile($datadir, "defaults", "2${to}_mac.yaml");
        $defaults = "-d2${to}_mac" if -f $defaultfile;
    }
    return($defaults // "");
}

# 调整参考文献文内引用中 “et al” 的显示格式 ----------------------------- {{{2
sub str_adj_etal {
    for (@{shift()}) {
        s{ (?<=[a-zA-Z]) (,\s|\s) 等                 }{$1et al.}mxg;
        s{ \s (等 (?:\s\( | ,\s  | <\/a> | <\/w:t>)) }{$1}gx;
    }
}

# 替代文件内容 ---------------------------------------------------------- {{{2
sub str_adj_file {
    my ($file, $sub) = @_;

    open my $infh, "<", $file
        or die "Cannot open $file: $!\n";
    my @contents = <$infh>;
    chomp(@contents);
    close $infh;

    my $newcontests_ref = $sub->(\@contents);
    open my $outfh, ">", $file
        or die "Cannot open $file: $!";
    print $outfh join "", @$newcontests_ref;
    close $outfh;
}

# 对于 html 输出格式做特殊的文本替代处理 -------------------------------- {{{2
sub str_adj_html {
    my $cjk = qr/[^A-Za-z,."'';。；，：“”（）、？《》]/;
    for (@{shift()}) {
        s/([^A-Za-z,."';])\s(<span class="citation" data\-cites="[^\w])/$1$2/g;
        s/($cjk)(<span class="citation"[^>]+>(<a href=[^>]+>)?[A-Za-z])/$1 $2/g;
    }
}

# 对 tex 输出格式做特殊的调整 ------------------------------------------- {{{2
sub str_adj_md_contents_for_tex {
    my $content_ref = shift;
    my $math_sign = qr/\$\$/;
    my $eq_begin = qr/\\begin\{equa[^\}]+\}/;
    my $eq_end = qr/\\end\{equa[^\}]+\}/;

    for (@{$content_ref}) {
        s/$math_sign ($eq_begin)/$1/gx;
        s/($eq_end) [^\$]* $math_sign/$1/gx;
    }
}

sub str_adj_tex {
    my $content_ref = shift;
    my $words = qr/[\w\p{P}\s]*\p{Han}+[\w\p{P}\s]*/;
    my $quote_left = qr/\`/;
    my $quote_right = qr/\'/;

    for (@{$content_ref}) {
        s/$quote_left{2} ($words) $quote_right{2}/“$1”/gx; 
        s/$quote_left    ($words) $quote_right   /‘$1’/gx;
    }
}

# 查找替代 word 文件的部分字符 ------------------------------------------ {{{2
sub str_adj_word {
    my $file = shift;
    my $cwd = getcwd();
    my $dir = tempdir( CLEANUP => 1 );
    system(qq/unzip -q "$file" -d "$dir"/);
    unlink $file;
    chdir "$dir";

    my $document_name = File::Spec->catfile("word", "document.xml");
    str_adj_file($document_name, \&str_adj_word_documents);
    my $footnotes_name = File::Spec->catfile("word", "footnotes.xml");
    str_adj_file($footnotes_name, \&str_adj_word_footnotes);

    system(qq/zip -r -q "$file" */) == 0 or die "zip error: $!";
    system("mv", $file, $cwd);
    chdir $cwd;
}

sub str_adj_word_documents {
    my $ori_content_ref = shift;
    my $content_ref = str_group_by_paragraph($ori_content_ref, "docx");
    str_adj_etal($content_ref);

    my $tag_start   = qr/ <w:r> \s* <w:t \s xml:space="preserve"> /imx;
    my $tag_end     = qr/ <\/w:t> \s* <\/w:r>                     /imx;
    my $tag_space   = qr/ $tag_start \s* $tag_end                 /imx;
    my $tag_par_l   = qr/ $tag_start \s* \( \s* $tag_end          /imx;
    my $tag_par_r   = qr/ $tag_start \s* \) \s* $tag_end          /imx;
    my $tag_ascii   = qr/ [A-z0-9_,;.\-()?:]                      /imx;
    my $digits_sign = qr/ [^\(]+ \(\d{4},                         /imx;

    my $start = q{<w:r><w:t xml:space="preserve">};
    my $end   = q{</w:t></w:r>};
    for (@{$content_ref}) {
        s/$tag_start \s+ $tag_end ($tag_start $digits_sign)/$1/gimx;
        # Convert English brackets after Chinese characters into Chinese brackets
        s{ (?<!$tag_ascii) (?<before>\s* $tag_end \s*)
            (?:$tag_space \s*)* \s*
            $tag_par_l (?<after>.*?) $tag_par_r
        }{ $+{before}
            . $start . "（" . $end
            . $+{after}
            . $start . "）" . $end
        }eimxg;
        s{
            (?<!$tag_ascii|\s) \s* \( \s* (?<after>.*?) $tag_par_r
        }{
            "（" . $+{after} . $start . "）" . $end
        }iegmx;
        s{
            (?<!$tag_ascii|\s) \s* \( \s* (?<after>[^<]*?) \) \s*
        }{
            "（" . $+{after} . "）"
        }iegmx;
    }
    return $content_ref;
}

sub str_group_by_paragraph {
    my ($content_ref, $ext) = @_;
    my %regex_paragraph_end_symbol = (
        docx => qr{\<\/w\:p\>},
        md   => qr{\A\s*\z},
    );
    my $end_symbol = $regex_paragraph_end_symbol{$ext};
    my @contents = @$content_ref;
    for (@contents) {
        s{($end_symbol)}{\n$1\n}gimx unless "\n" =~ m/$end_symbol/;
        s{\n\s*\n}{\n}mxg;
    }

    my @contents_by_par;
    my $par = "";
    for my $l (@contents) {
        $par .= $l;
        if ($l =~ m{$end_symbol}) {
            push @contents_by_par, $par;
            $par = "";
        }
    }
    push @contents_by_par, $par unless $par eq "";
    return \@contents_by_par;
}

sub str_adj_word_footnotes {
    my $content_ref = shift;
    str_adj_etal($content_ref);
    return $content_ref;
}

# 将数组中的内容写入指定文件 -------------------------------------------- {{{2
sub write2file {
    my ($content, $outfile) = @_;
    open my $fh, ">", $outfile or die "cannot open $outfile: $!";
    print $fh $_ for (@{$content});
    close $fh;
}

# 将 Rmarkdown 文件转化成 Markdown -------------------------------------- {{{2
sub knit_rmd2 {
    my ($infile, $to, $md_contents_ref, $pandoc_opt_ref, $logfile) = @_;
    # $infile, 待转换的原文件
    # $to，转换的目标格式
    # $md_contest, markdown 文件的内容，列表引用格式
    # $pandoc_options, pandoc 选项，列表引用格式

    my $rscript_path = File::Spec->catfile($PROGRAM_DIR, "parse_rmd.R");
    my $rmd_opt_path = File::Spec->catfile($PROGRAM_DIR, "rmd_option.yaml");
    my ($result_fh, $result) = tempfile();
    close $result_fh;

    if (system(qq{$rscript_path $to "$infile" "$rmd_opt_path" "$result"})) {
        unlink $result;
        die "Failed to parse $infile: $?"
    };
    my %rmd = %{YAML::LoadFile($result)};
    unlink $result;

    if (defined $rmd{knit_meta} and -f $rmd{knit_meta}) {
        push @{$pandoc_opt_ref}, "--include-in-header=" . $rmd{knit_meta};
    }
    
    if ($rmd{run_pandoc} eq 'no') {
        open my $md_fh, "<", $rmd{outfile}
            or die "Cannot open rmarkdown output $rmd{outfile}: $!";
        @{$md_contents_ref} = <$md_fh>;
        close $md_fh;

        push @{$pandoc_opt_ref},
            map {q<--lua-filter="> . $_ . q<">} @{$rmd{lua_filters}};
        push @{$pandoc_opt_ref}, "--variable=graphics";
    }
    return %rmd;
}


